<?php
// Fichier √† placer dans : app/Console/Commands/CheckModels.php
// Ou √† ex√©cuter via php artisan tinker

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\File;

class CheckModels extends Command
{
    protected $signature = 'btp:check-models';
    protected $description = 'V√©rifie la structure des mod√®les BTP existants';

    public function handle()
    {
        $this->info('üîç V√âRIFICATION DES MOD√àLES LARAVEL BTP');
        $this->info('======================================');
        
        // 1. V√©rifier les mod√®les existants
        $this->checkModels();
        
        // 2. V√©rifier les tables en base
        $this->checkTables();
        
        // 3. V√©rifier les relations possibles
        $this->checkRelations();
        
        // 4. Recommandations pour les tests
        $this->generateTestRecommendations();
    }
    
    private function checkModels()
    {
        $this->info("\nüìÅ MOD√àLES DISPONIBLES :");
        $this->info("------------------------");
        
        $modelsPath = app_path('Models');
        if (!File::exists($modelsPath)) {
            $this->error("‚ùå Dossier app/Models/ introuvable");
            return;
        }
        
        $models = File::files($modelsPath);
        foreach ($models as $model) {
            $modelName = pathinfo($model->getFilename(), PATHINFO_FILENAME);
            $this->info("‚úÖ {$modelName}.php");
            
            // V√©rifier si le mod√®le est instanciable
            $className = "App\\Models\\{$modelName}";
            if (class_exists($className)) {
                $this->line("   ‚Üí Classe {$className} trouv√©e");
            } else {
                $this->warn("   ‚ö†Ô∏è Classe {$className} non trouv√©e");
            }
        }
    }
    
    private function checkTables()
    {
        $this->info("\nüóÇÔ∏è TABLES EN BASE DE DONN√âES :");
        $this->info("-----------------------------");
        
        $tables = ['users', 'chantiers', 'devis', 'factures', 'paiements', 'lignes', 'messages', 'notifications'];
        
        foreach ($tables as $table) {
            if (Schema::hasTable($table)) {
                $this->info("‚úÖ Table '{$table}' existe");
                $columns = Schema::getColumnListing($table);
                $this->line("   Colonnes: " . implode(', ', $columns));
            } else {
                $this->warn("‚ùå Table '{$table}' n'existe pas");
            }
        }
    }
    
    private function checkRelations()
    {
        $this->info("\nüîó V√âRIFICATION DES RELATIONS :");
        $this->info("------------------------------");
        
        // V√©rifier User
        if (class_exists('App\Models\User')) {
            $user = new \App\Models\User();
            $this->info("‚úÖ User - M√©thodes disponibles :");
            $methods = get_class_methods($user);
            $relationMethods = array_filter($methods, function($method) {
                return in_array($method, ['chantiers', 'chantiersCommercial', 'chantiersClient', 'devis', 'factures']);
            });
            foreach ($relationMethods as $method) {
                $this->line("   ‚Üí {$method}()");
            }
        }
        
        // V√©rifier Chantier
        if (class_exists('App\Models\Chantier')) {
            $this->info("‚úÖ Chantier - Relations potentielles :");
            $this->line("   ‚Üí client() (belongsTo User)");
            $this->line("   ‚Üí commercial() (belongsTo User)");
            $this->line("   ‚Üí devis() (hasMany)");
            $this->line("   ‚Üí factures() (hasMany)");
        }
    }
    
    private function generateTestRecommendations()
    {
        $this->info("\nüéØ RECOMMANDATIONS POUR LES TESTS :");
        $this->info("----------------------------------");
        
        $this->info("Bas√© sur la structure d√©tect√©e, cr√©er :");
        $this->line("1. Tests Unit pour chaque mod√®le existant");
        $this->line("2. Tests Feature pour les routes confirm√©es");
        $this->line("3. Factory pour chaque mod√®le avec colonnes r√©elles");
        $this->line("4. Tests de permissions selon les r√¥les User");
        
        $this->warn("\n‚ö†Ô∏è NE PAS tester ce qui n'existe pas encore !");
    }
}

// OU version simplifi√©e pour Tinker :
// 
// use Illuminate\Support\Facades\Schema;
// 
// echo "üîç V√âRIFICATION RAPIDE\n";
// echo "===================\n";
// 
// $tables = ['users', 'chantiers', 'devis', 'factures', 'paiements'];
// foreach ($tables as $table) {
//     if (Schema::hasTable($table)) {
//         echo "‚úÖ {$table}: " . implode(', ', Schema::getColumnListing($table)) . "\n";
//     } else {
//         echo "‚ùå {$table}: n'existe pas\n";
//     }
// }
// 
// echo "\nMod√®les d√©tect√©s:\n";
// $models = ['User', 'Chantier', 'Devis', 'Facture', 'Paiement'];
// foreach ($models as $model) {
//     $class = "App\\Models\\{$model}";
//     echo class_exists($class) ? "‚úÖ {$model}\n" : "‚ùå {$model}\n";
// }